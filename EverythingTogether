from pandas.api.types import is_string_dtype
from pandas.api.types import is_numeric_dtype
import re

def concat(train, test, newcol):
        if (newcol in train.columns) or (newcol in test.columns):
            print(f"{newcol} is already present in train/test. "
                  "Rerun the function after changing the newcol parameter")
        else:
            train[newcol] = "Train"
            test[newcol] = "Test"
            df_raw = pd.concat([train, test], ignore_index=True)
            print(train.shape, test.shape, df_raw.shape )
            return df_raw

def split(df_raw, newcol):
    train = df_raw[df_raw[newcol]=='Train']
    train.drop(newcol, axis=1, inplace=True)
    test = df_raw[df_raw[newcol]=='Test']
    test.drop(newcol, axis=1, inplace=True)
    print(train.shape, test.shape)
    return train, test


def train_cats(df):
    for n,c in df.items():
        if is_string_dtype(c): df[n] = c.astype('category').cat.as_ordered()
    print(df.dtypes)

def check_categories(df, max_n_cat):
    for c in df.select_dtypes(include='category').columns:
        if len(df[c].cat.categories) <= max_n_cat:
            print(c)
            print(df[c].cat.categories)
#check_categories(train, 2)

#for d in train.select_dtypes(include='object').columns:
#    train[d] = train[d].astype('category')

def add_datepart(df, fldname, drop=True, time=False):
    fld = df[fldname]
    fld_dtype = fld.dtype
    if isinstance(fld_dtype, pd.core.dtypes.dtypes.DatetimeTZDtype):
        fld_dtype = np.datetime64

    if not np.issubdtype(fld_dtype, np.datetime64):
        df[fldname] = fld = pd.to_datetime(fld, infer_datetime_format=True)
    targ_pre = re.sub('[Dd]ate$', '', fldname)
    attr = ['Year', 'Month', 'Week', 'Day', 'Dayofweek', 'Dayofyear',
            'Is_month_end', 'Is_month_start', 'Is_quarter_end', 'Is_quarter_start', 'Is_year_end', 'Is_year_start']
    if time: attr = attr + ['Hour', 'Minute', 'Second']
    for n in attr: df[targ_pre + n] = getattr(fld.dt, n.lower())
    df[targ_pre + 'Elapsed'] = fld.astype(np.int64) // 10 ** 9
    if drop: df.drop(fldname, axis=1, inplace=True)

def all_add_datepart(df):
	for c in df.select_dtypes(include='datetime64[ns]').columns:
		add_datepart(df, c)	

def proc_df(df, y_fld=None, skip_flds=None, ignore_flds=None, do_scale=False, na_dict=None,
            preproc_fn=None, max_n_cat=None, subset=None, mapper=None, tree=True):
    if not ignore_flds: ignore_flds=[]
    if not skip_flds: skip_flds=[]
    if subset: df = get_sample(df,subset)
    else: df = df.copy()
    ignored_flds = df.loc[:, ignore_flds]
    df.drop(ignore_flds, axis=1, inplace=True)
    if preproc_fn: preproc_fn(df)
    if y_fld is None: y = None
    else:
        if not is_numeric_dtype(df[y_fld]): df[y_fld] = df[y_fld].cat.codes
        y = df[y_fld].values
        skip_flds += [y_fld]
    df.drop(skip_flds, axis=1, inplace=True)

    if na_dict is None: na_dict = {}
    else: na_dict = na_dict.copy()
    na_dict_initial = na_dict.copy()
    for n,c in df.items(): na_dict = fix_missing(df, c, n, na_dict)
    if len(na_dict_initial.keys()) > 0:
        df.drop([a + '_na' for a in list(set(na_dict.keys()) - set(na_dict_initial.keys()))], axis=1, inplace=True)
    if do_scale: mapper = scale_vars(df, mapper)
    for n,c in df.items(): numericalize(df, c, n, max_n_cat)
    if tree is True:
    	df = pd.get_dummies(df, dummy_na=True)
    else:
    	df = pd.get_dummies(df, dummy_na=True, drop_first=True)
    df = pd.concat([ignored_flds, df], axis=1)
    res = [df, y, na_dict]
    if do_scale: res = res + [mapper]
    if y_fld is not None: print(df.shape, y.shape)
    else: print(df.shape)
    return res
	
def fix_missing(df, col, name, na_dict):
    if is_numeric_dtype(col):
        if pd.isnull(col).sum() or (name in na_dict):
            df[name+'_na'] = pd.isnull(col)
            filler = na_dict[name] if name in na_dict else col.median()
            df[name] = col.fillna(filler)
            na_dict[name] = filler
    return na_dict
	

def numericalize(df, col, name, max_n_cat):
    if not is_numeric_dtype(col) and ( max_n_cat is None or len(col.cat.categories)>max_n_cat):
        df[name] = col.cat.codes+1	

def rmse(x,y):
    return np.sqrt(np.mean(np.square(x-y)))
	
def score(model,X_Train,Y_Train,X_Test,Y_Test):
    if hasattr(model, 'oob_score_'): 
        print("Training Score : "+ str(model.score(X_Train,Y_Train))  + " Test Score : " + str(model.score(X_Test,Y_Test)) + " RMSE Training : " + str(rmse(model.predict(X_Train), Y_Train)) + " RMSE Test : " + str(rmse(model.predict(X_Test), Y_Test)) + ", OOb score : " + str(model.oob_score_))
    else:
        print("Training Score : "+ str(model.score(X_Train,Y_Train))  + " Test Score : " + str(model.score(X_Test,Y_Test)) + " RMSE Training : " + str(rmse(model.predict(X_Train), Y_Train)) + " RMSE Test : " + str(rmse(model.predict(X_Test), Y_Test)))
        
